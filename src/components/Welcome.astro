<!doctype html>
<html lang='es'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <title>Space Rocks - Juego de Nave Espacial</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap");

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Orbitron", monospace;
        background: linear-gradient(
          135deg,
          #0c0c0c 0%,
          #1a1a2e 50%,
          #16213e 100%
        );
        color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        overflow: hidden;
      }

      .game-container {
        text-align: center;
        max-width: 800px;
        width: 100%;
        padding: 20px;
      }

      .screen {
        display: none;
        animation: fadeIn 0.5s ease-in;
      }

      .screen.active {
        display: block;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      h1 {
        font-size: 3em;
        font-weight: 900;
        margin-bottom: 20px;
        text-shadow: 0 0 20px #00ffff;
        background: linear-gradient(45deg, #00ffff, #ff00ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .input-group {
        margin: 30px 0;
      }

      label {
        display: block;
        margin-bottom: 10px;
        font-size: 1.2em;
        color: #00ffff;
      }

      input[type="text"] {
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid #00ffff;
        border-radius: 10px;
        padding: 15px;
        font-size: 1.1em;
        color: #fff;
        width: 100%;
        max-width: 300px;
        font-family: "Orbitron", monospace;
        text-align: center;
      }

      input[type="text"]:focus {
        outline: none;
        border-color: #ff00ff;
        box-shadow: 0 0 20px rgba(255, 0, 255, 0.5);
      }

      .btn {
        background: linear-gradient(45deg, #00ffff, #ff00ff);
        border: none;
        border-radius: 25px;
        padding: 15px 30px;
        font-size: 1.1em;
        font-weight: 700;
        color: #fff;
        cursor: pointer;
        font-family: "Orbitron", monospace;
        margin: 10px;
        transition: all 0.3s ease;
        text-transform: uppercase;
      }

      .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
      }

      .btn:active {
        transform: translateY(0);
      }

      #gameCanvas {
        border: 2px solid #00ffff;
        border-radius: 10px;
        background: #000;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
        max-width: 100%;
        height: auto;
      }

      .game-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 1.1em;
        font-weight: 700;
      }

      .score {
        color: #00ffff;
      }

      .player-name {
        color: #ff00ff;
      }

      .game-over-score {
        font-size: 2em;
        color: #ffff00;
        margin: 20px 0;
        text-shadow: 0 0 10px #ffff00;
      }

      .leaderboard {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 20px;
        margin-top: 20px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
      }

      .leaderboard h2 {
        color: #00ffff;
        margin-bottom: 20px;
      }

      .leaderboard-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        margin: 5px 0;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        border-left: 3px solid #00ffff;
      }

      .leaderboard-item:first-child {
        border-left-color: #ffff00;
        background: rgba(255, 255, 0, 0.1);
      }

      .leaderboard-item:nth-child(2) {
        border-left-color: #c0c0c0;
      }

      .leaderboard-item:nth-child(3) {
        border-left-color: #cd7f32;
      }

      .controls {
        margin-top: 20px;
        font-size: 0.9em;
        color: #aaa;
      }

      .loading {
        color: #00ffff;
        margin: 20px 0;
      }

      .mobile-controls {
        display: none;
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 100;
      }

      .mobile-controls.active {
        display: flex;
        gap: 20px;
      }

      .arrow-btn {
        width: 80px;
        height: 80px;
        background: rgba(0, 255, 255, 0.2);
        border: 2px solid #00ffff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2em;
        color: #00ffff;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
        backdrop-filter: blur(10px);
      }

      .arrow-btn:active {
        background: rgba(0, 255, 255, 0.4);
        transform: scale(0.95);
      }

      /* Responsive */
      @media (max-width: 768px) {
        h1 {
          font-size: 2em;
        }

        .game-info {
          font-size: 1em;
        }

        .btn {
          padding: 12px 24px;
          font-size: 1em;
        }

        #gameCanvas {
          max-width: 100%;
        }

        .mobile-controls {
          display: flex;
          gap: 15px;
        }

        .arrow-btn {
          width: 70px;
          height: 70px;
          font-size: 1.8em;
        }
      }

      /* Efectos de part√≠culas */
      .stars {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
      }

      .star {
        position: absolute;
        width: 2px;
        height: 2px;
        background: #fff;
        border-radius: 50%;
        animation: twinkle 2s infinite;
      }

      @keyframes twinkle {
        0%,
        100% {
          opacity: 0.3;
        }
        50% {
          opacity: 1;
        }
      }
    </style>
  </head>
  <body>
    <div class='stars' id='stars'></div>

    <div class='game-container'>
      <!-- Pantalla de Inicio -->
      <div id='startScreen' class='screen active'>
        <h1>üöÄ SPACE ROCKS</h1>
        <div class='input-group'>
          <label for='playerName'>Pone tu nombre:</label>
          <input
            type='text'
            id='playerName'
            placeholder='Nombre del piloto'
            maxlength='20'
          />
        </div>
        <button class='btn' id='startGameBtn'>!Dale ya!</button>
        <button class='btn' id='showLeaderboardBtn'>RANKING</button>
        <div class='controls'>
          <p>üéÆ Controles: Flechas ‚Üê ‚Üí del teclado o botones m√≥viles</p>
          <p>
            üéØ Objetivo: Esquiva los meteoritos y sobrevive el mayor tiempo
            posible
          </p>
          <p>‚ö° ¬°La dificultad aumenta r√°pidamente!</p>
        </div>
      </div>

      <!-- Pantalla de Juego -->
      <div id='gameScreen' class='screen'>
        <div class='game-info'>
          <div class='player-name'>üë®‚ÄçüöÄ <span id='currentPlayer'></span></div>
          <div class='score'>‚≠ê Puntaje: <span id='currentScore'>0</span></div>
        </div>
        <canvas id='gameCanvas' width='800' height='600'></canvas>
        <div class='controls'>
          <p>
            ‚ö° ¬°La dificultad aumenta r√°pidamente! Usa las flechas del teclado o
            los botones m√≥viles
          </p>
        </div>
      </div>

      <!-- Controles m√≥viles -->
      <div class='mobile-controls' id='mobileControls'>
        <div class='arrow-btn' id='leftArrow'>‚Üê</div>
        <div class='arrow-btn' id='rightArrow'>‚Üí</div>
      </div>

      <!-- Pantalla de Game Over -->
      <div id='gameOverScreen' class='screen'>
        <h1>üí• GAME OVER</h1>
        <div class='game-over-score'>
          Tu puntaje: <span id='finalScore'>0</span>
        </div>
        <div class='loading' id='savingScore'>Guardando puntaje...</div>
        <button class='btn' id='restartGameBtn'>JUGAR DE NUEVO</button>
        <button class='btn' id='showLeaderboardBtn2'>VER RANKING</button>
        <button class='btn' id='goToStartBtn'>MEN√ö PRINCIPAL</button>
      </div>

      <!-- Pantalla de Ranking -->
      <div id='leaderboardScreen' class='screen'>
        <h1>üèÜ RANKING</h1>
        <div class='leaderboard'>
          <h2>Top 10 Mejores Puntajes</h2>
          <div id='leaderboardList'>
            <div class='loading'>Cargando ranking...</div>
          </div>
        </div>
        <button class='btn' id='goToStartBtn2'>VOLVER AL MEN√ö</button>
      </div>
    </div>

    <!-- Firebase SDK -->
    <script type='module'>
      import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js"
      import {
        getFirestore,
        collection,
        addDoc,
        query,
        where,
        orderBy,
        limit,
        getDocs,
        updateDoc,
        serverTimestamp,
      } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js"

      // Configuraci√≥n de Firebase
      const firebaseConfig = {
        apiKey: "AIzaSyCT0RLrdDABrbeMvllHyLtVMRZM4dthO9M",
        authDomain: "space-rocks-f4125.firebaseapp.com",
        projectId: "space-rocks-f4125",
        storageBucket: "space-rocks-f4125.firebasestorage.app",
        messagingSenderId: "882582684443",
        appId: "1:882582684443:web:10044e7879d4c26f1b49be",
      }

      // Initialize Firebase
      const app = initializeApp(firebaseConfig)
      const db = getFirestore(app)

      // Hacer db disponible globalmente
      window.db = db
      window.firebaseFunctions = {
        collection,
        addDoc,
        query,
        where,
        orderBy,
        limit,
        getDocs,
        updateDoc,
        serverTimestamp,
      }
    </script>

    <script>
      // @ts-nocheck
      // @ts-ignore
      // Obtener Firebase desde el m√≥dulo anterior
      let db = window.db
      let firebaseFunctions = window.firebaseFunctions

      // Variables del juego
      /** @type {HTMLCanvasElement | null} */
      let canvas = document.getElementById("gameCanvas")
      /** @type {CanvasRenderingContext2D | null} */
      let ctx =
        canvas && canvas instanceof HTMLCanvasElement
          ? canvas.getContext("2d")
          : null
      let gameRunning = false
      /** @type {number | undefined} */
      let animationId
      let currentPlayer = ""
      let score = 0
      let gameSpeed = 1
      let meteorSpawnRate = 0.015 // Frecuencia inicial de aparici√≥n
      let gameTime = 0

      // Objetos del juego
      let ship = {
        x:
          canvas && canvas instanceof HTMLCanvasElement
            ? canvas.width / 2 - 25
            : 375,
        y:
          canvas && canvas instanceof HTMLCanvasElement
            ? canvas.height - 80
            : 520,
        width: 50,
        height: 60,
        speed: 7, // Aumentado de 5 a 7 para respuesta m√°s r√°pida
      }

      /** @type {Array<{x: number, y: number, width: number, height: number, speed: number, rotation: number}>} */
      let meteors = []
      /** @type {Array<{x: number, y: number, vx: number, vy: number, life: number, maxLife: number}>} */
      let particles = []
      /** @type {{[key: string]: boolean}} */
      let keys = {}

      // Crear estrellas de fondo
      function createStars() {
        const starsContainer = document.getElementById("stars")
        if (!starsContainer) return
        for (let i = 0; i < 100; i++) {
          const star = document.createElement("div")
          star.className = "star"
          star.style.left = Math.random() * 100 + "%"
          star.style.top = Math.random() * 100 + "%"
          star.style.animationDelay = Math.random() * 2 + "s"
          starsContainer.appendChild(star)
        }
      }

      // Funciones de navegaci√≥n
      function showScreen(screenId: string) {
        document.querySelectorAll(".screen").forEach((screen) => {
          screen.classList.remove("active")
        })
        const screenEl = document.getElementById(screenId)
        if (screenEl) screenEl.classList.add("active")
        // Mostrar controles m√≥viles solo en pantalla de juego
        const mobileControls = document.getElementById("mobileControls")
        if (mobileControls) {
          if (screenId === "gameScreen") {
            mobileControls.classList.add("active")
          } else {
            mobileControls.classList.remove("active")
          }
        }
      }

      function startGame() {
        const playerNameInput = document.getElementById(
          "playerName"
        ) as HTMLInputElement
        const playerName = playerNameInput ? playerNameInput.value.trim() : ""
        if (!playerName) {
          alert("Por favor ingresa tu nombre")
          return
        }
        currentPlayer = playerName
        const currentPlayerEl = document.getElementById("currentPlayer")
        if (currentPlayerEl) currentPlayerEl.textContent = currentPlayer
        score = 0
        gameSpeed = 1
        meteorSpawnRate = 0.015
        gameTime = 0
        // Reiniciar objetos
        ship.x =
          canvas && canvas instanceof HTMLCanvasElement
            ? canvas.width / 2 - 25
            : 375
        meteors = []
        particles = []
        showScreen("gameScreen")
        gameRunning = true
        gameLoop()
      }

      function restartGame() {
        startGame()
      }

      function goToStart() {
        showScreen("startScreen")
      }

      function showLeaderboard() {
        showScreen("leaderboardScreen")
        loadLeaderboard()
      }

      // Funciones del juego
      function createMeteor() {
        meteors.push({
          x:
            canvas && canvas instanceof HTMLCanvasElement
              ? Math.random() * (canvas.width - 40)
              : Math.random() * (800 - 40),
          y: -40,
          width: 40,
          height: 40,
          speed: 3 + Math.random() * 4 * gameSpeed, // Velocidad base aumentada
          rotation: Math.random() * Math.PI * 2,
        })
      }

      function createParticle(x: number, y: number) {
        for (let i = 0; i < 8; i++) {
          particles.push({
            x: x,
            y: y,
            vx: (Math.random() - 0.5) * 10,
            vy: (Math.random() - 0.5) * 10,
            life: 30,
            maxLife: 30,
          })
        }
      }

      function updateGame() {
        gameTime++
        // Mover nave
        if (keys["ArrowLeft"] && ship.x > 0) {
          ship.x -= ship.speed
        }
        if (
          keys["ArrowRight"] &&
          canvas &&
          canvas instanceof HTMLCanvasElement &&
          ship.x < canvas.width - ship.width
        ) {
          ship.x += ship.speed
        }
        // Aumentar dificultad progresivamente
        gameSpeed = 1 + gameTime / 1800
        meteorSpawnRate = 0.015 + gameTime / 18000
        if (meteorSpawnRate > 0.15) meteorSpawnRate = 0.15
        if (gameSpeed > 8) gameSpeed = 8
        if (Math.random() < meteorSpawnRate) {
          createMeteor()
        }
        // Actualizar meteoritos
        meteors.forEach((meteor, meteorIndex) => {
          meteor.y += meteor.speed
          meteor.rotation += 0.1
          if (
            canvas &&
            canvas instanceof HTMLCanvasElement &&
            meteor.y > canvas.height
          ) {
            meteors.splice(meteorIndex, 1)
            score += 20
          }
          if (
            meteor.x < ship.x + ship.width &&
            meteor.x + meteor.width > ship.x &&
            meteor.y < ship.y + ship.height &&
            meteor.y + meteor.height > ship.y
          ) {
            createParticle(ship.x + ship.width / 2, ship.y + ship.height / 2)
            gameOver()
          }
        })
        // Actualizar part√≠culas
        particles.forEach((particle, particleIndex) => {
          particle.x += particle.vx
          particle.y += particle.vy
          particle.life--
          if (particle.life <= 0) {
            particles.splice(particleIndex, 1)
          }
        })
        score += 2
        const currentScoreEl = document.getElementById("currentScore")
        if (currentScoreEl) currentScoreEl.textContent = score.toString()
      }

      function drawGame() {
        if (!ctx || !canvas || !(canvas instanceof HTMLCanvasElement)) return
        ctx.fillStyle = "#000"
        ctx.fillRect(0, 0, canvas.width, canvas.height)
        ctx.fillStyle = "#fff"
        for (let i = 0; i < 50; i++) {
          const x = (i * 37) % canvas.width
          const y = (i * 23 + Date.now() * 0.05) % canvas.height
          ctx.fillRect(x, y, 1, 1)
        }
        // Dibujar nave
        ctx.fillStyle = "#00ffff"
        ctx.fillRect(ship.x + 20, ship.y, 10, 40)
        ctx.fillRect(ship.x, ship.y + 20, 50, 20)
        ctx.fillRect(ship.x + 10, ship.y + 40, 30, 20)
        ctx.fillStyle = "#ff6600"
        ctx.fillRect(ship.x + 5, ship.y + 55, 8, 10)
        ctx.fillRect(ship.x + 37, ship.y + 55, 8, 10)
        meteors.forEach((meteor) => {
          ctx.save()
          ctx.translate(
            meteor.x + meteor.width / 2,
            meteor.y + meteor.height / 2
          )
          ctx.rotate(meteor.rotation)
          ctx.fillStyle = "#8B4513"
          ctx.fillRect(
            -meteor.width / 2,
            -meteor.height / 2,
            meteor.width,
            meteor.height
          )
          ctx.fillStyle = "#654321"
          ctx.fillRect(
            -meteor.width / 2 + 5,
            -meteor.height / 2 + 5,
            meteor.width - 10,
            meteor.height - 10
          )
          ctx.restore()
        })
        particles.forEach((particle) => {
          ctx.fillStyle = `rgba(255, ${Math.floor((255 * particle.life) / particle.maxLife)}, 0, ${particle.life / particle.maxLife})`
          ctx.fillRect(particle.x, particle.y, 3, 3)
        })
      }

      function gameLoop() {
        if (!gameRunning) return
        updateGame()
        drawGame()
        animationId = requestAnimationFrame(gameLoop)
      }

      function gameOver() {
        gameRunning = false
        if (animationId !== undefined) cancelAnimationFrame(animationId)
        const finalScoreEl = document.getElementById("finalScore")
        if (finalScoreEl) finalScoreEl.textContent = score.toString()
        showScreen("gameOverScreen")
        saveScore()
      }

      // Funciones de base de datos
      async function saveScore() {
        const savingElement = document.getElementById("savingScore")
        try {
          if (db && firebaseFunctions) {
            // Verificar si el jugador ya existe y actualizar o agregar
            const scoresRef = firebaseFunctions.collection(db, "scores")
            const q = firebaseFunctions.query(
              scoresRef,
              firebaseFunctions.where("name", "==", currentPlayer)
            )
            const querySnapshot = await firebaseFunctions.getDocs(q)

            if (!querySnapshot.empty) {
              // Actualizar solo si el nuevo puntaje es mayor
              const existingDoc = querySnapshot.docs[0]
              const existingScore = existingDoc.data().score

              if (score > existingScore) {
                await firebaseFunctions.updateDoc(existingDoc.ref, {
                  score: score,
                  timestamp: firebaseFunctions.serverTimestamp(),
                })
              }
            } else {
              // Agregar nuevo jugador
              await firebaseFunctions.addDoc(scoresRef, {
                name: currentPlayer,
                score: score,
                timestamp: firebaseFunctions.serverTimestamp(),
              })
            }
          } else {
            // Fallback a localStorage si Firebase no est√° disponible
            let scores = JSON.parse(
              localStorage.getItem("spaceGameScores") || "[]"
            )
            const existingIndex = scores.findIndex(
              (s) => s.name === currentPlayer
            )

            if (existingIndex !== -1) {
              if (score > scores[existingIndex].score) {
                scores[existingIndex] = {
                  name: currentPlayer,
                  score: score,
                  timestamp: Date.now(),
                }
              }
            } else {
              scores.push({
                name: currentPlayer,
                score: score,
                timestamp: Date.now(),
              })
            }
            localStorage.setItem("spaceGameScores", JSON.stringify(scores))
          }

          if (savingElement) {
            savingElement.textContent = "¬°Puntaje guardado!"
            savingElement.style.color = "#00ff00"
          }
        } catch (error) {
          console.error("Error al guardar puntaje:", error)
          if (savingElement) {
            savingElement.textContent = "Error al guardar puntaje"
            savingElement.style.color = "#ff0000"
          }
        }
      }

      async function loadLeaderboard() {
        const leaderboardList = document.getElementById("leaderboardList")
        if (!leaderboardList) return
        leaderboardList.innerHTML =
          '<div class="loading">Cargando ranking...</div>'
        try {
          let scores = []

          if (db && firebaseFunctions) {
            // Cargar desde Firebase
            const scoresRef = firebaseFunctions.collection(db, "scores")
            const q = firebaseFunctions.query(
              scoresRef,
              firebaseFunctions.orderBy("score", "desc"),
              firebaseFunctions.limit(10)
            )
            const querySnapshot = await firebaseFunctions.getDocs(q)

            querySnapshot.forEach((doc) => {
              scores.push(doc.data())
            })
          } else {
            // Cargar desde localStorage
            scores = JSON.parse(localStorage.getItem("spaceGameScores") || "[]")
            scores.sort((a, b) => b.score - a.score)
            scores = scores.slice(0, 10)
          }

          if (scores.length === 0) {
            leaderboardList.innerHTML =
              '<div style="color: #888;">No hay puntajes registrados</div>'
            return
          }

          leaderboardList.innerHTML = ""
          scores.forEach((scoreData, index) => {
            const item = document.createElement("div")
            item.className = "leaderboard-item"
            const position = index + 1
            const medal =
              position === 1
                ? "ü•á"
                : position === 2
                  ? "ü•à"
                  : position === 3
                    ? "ü•â"
                    : `${position}.`
            item.innerHTML = `
                        <span>${medal} ${scoreData.name}</span>
                        <span>${scoreData.score}</span>
                    `
            leaderboardList.appendChild(item)
          })
        } catch (error) {
          console.error("Error al cargar ranking:", error)
          leaderboardList.innerHTML =
            '<div style="color: #ff0000;">Error al cargar el ranking</div>'
        }
      }

      // Event listeners
      document.addEventListener("keydown", (e) => {
        keys[e.key] = true
      })
      document.addEventListener("keyup", (e) => {
        keys[e.key] = false
      })
      // Controles t√°ctiles para flechas m√≥viles
      const leftArrow = document.getElementById("leftArrow")
      const rightArrow = document.getElementById("rightArrow")
      if (leftArrow) {
        leftArrow.addEventListener("touchstart", (e) => {
          e.preventDefault()
          keys["ArrowLeft"] = true
        })
        leftArrow.addEventListener("touchend", (e) => {
          e.preventDefault()
          keys["ArrowLeft"] = false
        })
        leftArrow.addEventListener("mousedown", (e) => {
          e.preventDefault()
          keys["ArrowLeft"] = true
        })
        leftArrow.addEventListener("mouseup", (e) => {
          e.preventDefault()
          keys["ArrowLeft"] = false
        })
      }
      if (rightArrow) {
        rightArrow.addEventListener("touchstart", (e) => {
          e.preventDefault()
          keys["ArrowRight"] = true
        })
        rightArrow.addEventListener("touchend", (e) => {
          e.preventDefault()
          keys["ArrowRight"] = false
        })
        rightArrow.addEventListener("mousedown", (e) => {
          e.preventDefault()
          keys["ArrowRight"] = true
        })
        rightArrow.addEventListener("mouseup", (e) => {
          e.preventDefault()
          keys["ArrowRight"] = false
        })
      }
      // Controles t√°ctiles en el canvas (mantener como alternativa)
      if (canvas && canvas instanceof HTMLCanvasElement) {
        canvas.addEventListener("touchstart", (e) => {
          e.preventDefault()
          const touch = e.touches[0]
          const rect = canvas.getBoundingClientRect()
          const x = touch.clientX - rect.left
          if (x < canvas.width / 2) {
            keys["ArrowLeft"] = true
          } else {
            keys["ArrowRight"] = true
          }
        })
        canvas.addEventListener("touchend", (e) => {
          e.preventDefault()
          keys["ArrowLeft"] = false
          keys["ArrowRight"] = false
        })
      }
      // Permitir Enter para iniciar el juego
      const playerNameInput = document.getElementById(
        "playerName"
      ) as HTMLInputElement
      if (playerNameInput) {
        playerNameInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            startGame()
          }
        })
      }
      // Responsive canvas
      function resizeCanvas() {
        const container = document.querySelector(".game-container")
        const maxWidth = Math.min(800, window.innerWidth - 40)
        const maxHeight = Math.min(600, window.innerHeight - 200)
        if (canvas) {
          canvas.style.width = maxWidth + "px"
          canvas.style.height = maxWidth * 0.75 + "px"
        }
      }
      window.addEventListener("resize", resizeCanvas)
      // Event listeners para botones
      document
        .getElementById("startGameBtn")
        ?.addEventListener("click", startGame)
      document
        .getElementById("showLeaderboardBtn")
        ?.addEventListener("click", showLeaderboard)
      document
        .getElementById("showLeaderboardBtn2")
        ?.addEventListener("click", showLeaderboard)
      document
        .getElementById("restartGameBtn")
        ?.addEventListener("click", restartGame)
      document
        .getElementById("goToStartBtn")
        ?.addEventListener("click", goToStart)
      document
        .getElementById("goToStartBtn2")
        ?.addEventListener("click", goToStart)

      // Inicializaci√≥n
      createStars()
      resizeCanvas()
      // Enfocar el input al cargar
      if (playerNameInput) playerNameInput.focus()
    </script>
  </body>
</html>
